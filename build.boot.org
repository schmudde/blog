#+TITLE: Beyond the Frame
#+AUTHOR: David Schmudde
#+EMAIL: d@schmud.de
#+LANGUAGE: en
#+STARTUP: align indent fold nodlcheck hidestars oddeven lognotestate

This is the code for my blog and personal website, /[[https://schmud.de/][Beyond the Frame]]/.

This README is also the ~build.boot~ file as a literate [[https://orgmode.org/worg/org-contrib/babel/intro.html][Babel]] document (aka org-babel). ~CTRL-c-v-t~ in Emacs [[https://orgmode.org/org.html#Working-With-Source-Code][will tangle code]] and generate the ~build.boot~.

- To build the website, run ~boot build~.
- To start a development server, run ~boot dev~.

* Non-Clojure Dependencies

- To run [[https://github.com/Deraen/boot-livereload][boot-livereload]] a JavaScript file named ~livereload.js~ must be saved under ~resources/js/livereload.js~. More information is available from the [[http://livereload.com/browser/script-tag/][LiveReload website]], but the script is pretty simple: ~document.write('<script src="http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1"></' + 'script>')~.
- CSS
    - Tufte CSS
    - Font Awesome v 5.14.0
        - [[https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use][Basic Use]]
        - [[https://fontawesome.com/cheatsheet][Cheatsheet]]
    - Tachyons v4.9.1
    - Pandoc

** Pandoc

- [[https://github.com/jez/tufte-pandoc-css][Tufte Pandoc CSS]]
- ~perun/pandoc~ builds the HTML from markdown in Perun.
    - ~sudo apt install pandoc~
    - Supports [[https://pandoc.org/MANUAL.html#footnotes][footnotes]], unlinke the default Perun plugin.
        - The default is equivalent to: ~pandoc 2020-04-11-perun-blog-2.md -f markdown -t html5 -o test.html~
    - [[https://github.com/jez/pandoc-sidenote][Pandoc Sidenote]] for creating sidenotes rather than footnotes.
        - Called by ~pandoc --filter pandoc-sidenote~.
        - In Perun, default ~["-f" "markdown" "-t" "html5"]~ &rarr; ~["--from" "markdown" "--to" "html5" "--filter" "pandoc-sidenote"]~
        - ~sudo apt-set install pandoc-sidenote~
    - ~:cmd-opts~ — CMD line options to pass to pandoc, (default ~["-f" "markdown" "-t" "html5"]~, which converts markdown files to html5).

** Tufte CSS

[[https://www.erikto.com/other/old-blog/embedding-youtube/][Erik]] came up with a great way to embed videos in Tufte and keep them 16x9.

#+BEGIN_SRC html :tangle no
<figure>
    <div class="iframe-wrapper">
        <iframe src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>
    </div>
</figure>
#+END_SRC

But on mobile it doesn't reach its full width.

#+BEGIN_SRC css :tangle no
figure {
    max-width: 90%;
}
#+END_SRC

So it can be centered.

#+BEGIN_SRC css :tangle no
figure {
    max-width: 90%;
    display: block;
    margin-left: auto;
    margin-right: auto;
}
#+END_SRC

* The Boot Build File

** Create the Environment

#+BEGIN_SRC clojure :tangle yes :tangle build.boot
;; DO NOT EDIT
;; This file is tangled from README.org.

(set-env!
 :source-paths #{"src" "content"}
 :resource-paths #{"resources"}
 :dependencies '[[perun "0.4.3-SNAPSHOT" :scope "test"]
                 [nrepl "0.7.0" :scope "test"]
                 [hiccup "1.0.5" :exclusions [org.clojure/clojure]]
                 [javax.xml.bind/jaxb-api "2.3.0"] ;; new requirement after local system update
                 [pandeiro/boot-http "0.8.3" :exclusions [org.clojure/clojure]]
                 [deraen/boot-livereload "0.2.1"]
                 [time-literals "0.1.4"]
                 [cljc.java-time "0.1.11"]])
#+END_SRC

A few quick notes on the configuration.

- ~:resource-paths #{"resources" "content"}~: I keep my raw files in two places. My original writing is under ~content~ while ~resources~ has all of the necessary images, css, js, etc....
- ~[deraen/boot-livereload "0.2.1"]~ : [[https://github.com/Deraen/boot-livereload][boot-livereload]] is an important part of any boot flow involving a browser. It reloads the browser when any files are changed.

TODO:

- The ~[javax.xml.bind/jaxb-api "2.3.0"]~ requirement?
- The two ~time~ requirements?

#+BEGIN_SRC clojure :tangle yes :tangle build.boot
(require '[io.perun :as perun]
         '[pandeiro.boot-http :refer [serve]]
         '[deraen.boot-livereload :refer [livereload]])
#+END_SRC

** Helper Functions

Is it a blog post, a webpage, or a book review? Has it been published?

#+BEGIN_SRC clojure :tangle yes :tangle build.boot
  (defn page? [{:keys [original-path] :as meta}]
    (if original-path
      (.startsWith original-path "pages/")
      false))

  (defn post? [{:keys [original-path] :as meta}]
    (if original-path
      (.startsWith original-path "posts/")
      false))

  (defn book?
    "In: {:original-path \"books\"}"
    [{:keys [original-path] :as meta}]
    (if original-path
      (.startsWith original-path "books/")
      false))

  (defn program?
    "In: {:original-path \"programs\"}"
    [{:keys [original-path] :as meta}]
    (if original-path
      (.startsWith original-path "programs/")
      false))

  (defn published?
    "In: {:date-published \"yes\"}"
    [{:keys [date-published] :as meta}]
    (if date-published true false))
#+END_SRC

** The Main Build Task

This is the build task that builds the static site.

TODO: why do all ~css/~ dirs update every time I render, but not the ~*.css~ files

#+BEGIN_SRC clojure :tangle yes :tangle build.boot
  (deftask build []
    (comp (perun/global-metadata :filename "site.base.edn")
          (perun/pandoc :cmd-opts ["--from" "markdown" "--to" "html5" "--filter" "pandoc-sidenote"])
          (perun/collection :renderer 'site.core/render-index-page :page "index.html"
                            :filterer (apply every-pred [post? published?]))
          (perun/collection :renderer 'site.core/render-index-page :page "books.html"
                            :filterer (apply every-pred [book? published?]))
          (perun/collection :renderer 'site.core/render-programs-index-page :page "programs.html"
                            :filterer (apply every-pred [program? published?]))
          (perun/render :renderer 'site.core/render-post-pages
                        :filterer (apply every-pred [post? published?])
                        :meta {:type "post"})
          (perun/render :renderer 'site.core/render-book-pages
                        :filterer (apply every-pred [book? published?])
                        :meta {:type "book"})
          (perun/render :renderer 'site.core/render-post-pages
                        :filterer (apply every-pred [program? published?])
                        :meta {:type "program"})
          (perun/tags :renderer 'site.core/render-tag-pages
                      :filterer (apply every-pred [(some-fn book? post? program?) published?])
                      :out-dir "public/tags")
          (perun/render :renderer 'site.core/render-post-pages
                        :filterer page?
                        :meta {:type "page"})
          (perun/static :renderer 'site.cv/render
                        :page "cv.html"
                        :meta {:type "page"})
          (perun/static :renderer 'site.timeline/render
                        :page "timeline.html"
                        :meta {:type "page"})
          (perun/collection :renderer 'site.previous-entries/render
                            :page "previous-entries.html"
                            :filterer (apply every-pred [(some-fn book? post? program?) published?]))
          (perun/rss :filterer (apply every-pred [post? published?]))
          (target)))
#+END_SRC

It's complex task, so I broke out a few details below.

This site must render through [[https://pandoc.org/][pandoc]] to render [[https://edwardtufte.github.io/tufte-css/][tufte css]]-style sidenotes from the Markdown source. The ~pandoc-sidenote~ plugin does the heavy lifting.

The ~collection~ task renders links to all previous posts in ~index.html~. ~render~ actually does the rendering.

#+BEGIN_SRC clojure :tangle no
(perun/pandoc :cmd-opts ["--from" "markdown" "--to" "html5" "--filter" "pandoc-sidenote"])
(perun/collection :renderer 'site.core/render-index-page :page "index.html"
                  :filterer (apply every-pred [post? published?]))
(perun/render :renderer 'site.core/render-post-pages
              :filterer (apply every-pred [post? published?])
              :meta {:type "post"})
#+END_SRC

** The Development Task

The ~dev~ task sandwiches the ~build~ function between ~watch~ and ~serve~. The former watches for any changes to your files and automatically recompiles. The latter serves those files to a web browser.

Perun offers an elegant way to inject the script into every page in the development environment. ~(livereload :asset-path "public" :filter #"\.(css|html|js)$")~ lets ~livereload~ know what to look for, while ~(perun/inject-scripts :scripts #{"js/livereload.js"})~ loads the actual script.

#+BEGIN_SRC clojure :tangle yes :tangle build.boot
(deftask dev []
  (comp (watch)
        (build)
        (perun/inject-scripts :scripts #{"js/livereload.js"})
        (livereload :asset-path "public" :filter #"\.(css|html|js)$")
        (serve :resource-root "public")))
#+END_SRC

** Development Environment

There is no nrepl present. The current process:

1. ~boot dev~
2. Open a project file, ~*.clj~, and ~cider-jack-in~.

Updating the file will update the website.

Customize the jack-in command by tweaking the shell command it runs to include a dev profile.

~C-u M-x cider-jack-in~ to specify the exact command for ~cider-jack-in~. Specifically, add the ~dev~ profile.

I need to customize the command line CIDER uses for cider-jack-in by modifying the following string options:

- ~cider-boot-global-options~: these are passed to the command directly, in first position (e.g., -o to lein enables offline mode).
- ~cider-boot-parameters~: these are usually task names and their parameters (e.g., dev for launching boot’s dev task instead of the standard repl -s wait).

* Appendix

Plugins I would like to add someday:

- ~(perun/sitemap :filename "sitemap.xml")~
- ~(perun/ttr)~
- ~(perun/word-count)~
- ~(perun/build-date)~
- ~(perun/paginate :renderer 'io.perun.example.paginate/render)~
- ~(perun/sitemap)~
- ~(perun/atom-feed :filterer :original)~

** TODO Troubleshooting

Insert ~(perun/print-meta)~ into the ~(deftask dev [] ...)~ command to troubleshoot the build process.

~boot --verbose build~

~boot show -f perun/markdown show -f~: To inspect the files and metadata that is passed from task to task, there are two tasks we can use. The Boot built-in task ~show~ includes a convenient option to display a tree of all files in the fileset. To see how a task changes the fileset, you can use it like this: https://perun.io/guides/getting-started/

Regular build bug: ~[inject-scripts] - copied unchanged file public/posts/2020-04-29-info-to-knowledge.html~


** TODO Improvements

- elisp fiction to autocomplete keywords (vs. tags)

Tachyons measures widths using the ~border-box~ model. Tufte uses the ~content-box~ model. I experimented with simply switching the model in my custom css file, ~btf.css~, but [[https://stackoverflow.com/questions/44453391/what-is-the-difference-between-border-box-and-content-box-in-css#44453514][it broke the reflow]] (as expected).

#+BEGIN_SRC css :tangle no
body {
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box;
    box-sizing: content-box;
}
#+END_SRC

TODO: The ideal solution is to use a [[https://github.com/tachyons-css/generator][custom Tachyons build]].

** lftp

lftp uses Transport Layer Security (TLS). So it's essential to first grab the certificate from the FTP server.

#+NAME: certificate
#+BEGIN_SRC shell :results code
openssl s_client -connect schmud.de:21 -starttls ftp
#+END_SRC

1. I include the certificate chain in a new file called ~mycert.crt~ in the local ~/.lftp folder.
2. I create a file called ~rc~ in the local ~/.lftp folder and add the lines
    - ~set ssl:ca-file "mycert.crt"~
    - ~set ssl:check-hostname no~ (this prevents ~Fatal error: Certificate verification: certificate common name doesn't match requested host name ‘<ftp-hostname>’~ when running a command like ~ls~ remotely)

Further reading:

- [[https://www.versatilewebsolutions.com/blog/2014/04/lftp-ftps-and-certificate-verification.html][LFTP FTPS and Certificate Verification]]
- [[https://linux.overshoot.tv/wiki/networking/lftp_backup_and_mirroring][lftp: backup and mirroring]]

Alternatively, it may be possible to use the Ubuntu certificates in some cases:

- Grab the latest certificates: ~sudo update-ca-certificates~
- Update the ~/etc/lftp.conf~ by pointing to the certificate file ~set ssl:ca-file "/etc/ssl/certs/ca-certificates.crt"~

Alternatively, alternatively certificate errors can be temporarily suppressed using ~set ssl:verify-certificate false~ at the ~lftp~ prompt

lftp commands include

- ~local ls~: run command locally
- ~lcd~: local change directory

** Comment Log

#+BEGIN_SRC clojure :tangle yes :tangle build.boot
(comment

  (published? {:date-published nil})
  (published? {:date-published "avril 14th"})

  (def path-data [{:original-path "posts/fefe"} {:original-path nil} {:original-path "po"} {:original-path "fee/fefef"} {:original-path "posts/zzz"} ])

  (def pub-data [{:date-published "avril 14th"} {:date-published nil} {:date-published "may 14th"}])

  (def pub-path-data [{:original-path "posts/fefe" :date-published "avril 14th"} {:original-path nil :date-published "date"} {:original-path "po" :date-published "may 14th"} {:original-path "fee/fefef" :date-published nil} {:original-path "posts/zzz" :date-published "may 14th"} ])

  (filter post? path-data)
  (filter published? pub-path-data)
  (filterv (and post? published?) pub-path-data)
  ; > ({:original-path "posts/fefe", :date-published "avril 14th"}
  ;    {:original-path nil, :date-published "date"}
  ;    {:original-path "po", :date-published "may 14th"}
  ;    {:original-path "posts/zzz", :date-published "may 14th"})
  (filter (or post? published?) pub-path-data)
  ; > ({:original-path "posts/fefe", :date-published "avril 14th"}
  ;    {:original-path "posts/zzz", :date-published "may 14th"})

  (filter (apply every-pred [post? published?]) pub-path-data)
  ; > ({:original-path "posts/fefe", :date-published "avril 14th"}
  ;    {:original-path "posts/zzz", :date-published "may 14th"})

  (map #(and (post? %) (published? %)) pub-path-data) ; (true false false false true)
  (map #(or (post? %) (published? %)) pub-path-data) ; (true true true false true)

  )
#+END_SRC

** Editing Org Mode

- ~<s~ &rarr; ~TAB~: write a code block in a .org file.
    - ~C-c-v-t~: tangle the file and produce
    - ~C-c~: evaluate the Clojure code
    - ~C-c-e h~: export to HTML, ~C-c-e b~ see it immediately in a browser window
    - Run these commands with
        - ~C-c C-c~
        - ~C-c C-o~: results in a separate buffer.
- ~#+BEGIN_SRC shell :results code~: the ~#+RESULTS: certificate~ must be as ~:results code~ rather than ~drawer~, otherwise it will not render correctly in GitHub.
- Clojure + Literate Programming originally inspired by /[[https://github.com/limist/literate-clojure-ants/blob/master/literate-ants.org][Literate Clojure Ants]]/
